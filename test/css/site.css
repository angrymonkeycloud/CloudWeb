:root {
  /* Consistent line spacing, which does not unnecessarily grow to accommodate things that would fit anyway */
  /* From CSS Inline Layout Module Level 3: https://drafts.csswg.org/css-inline-3/#line-sizing-property */
  line-sizing: normal;
  /* Improve spacing of punctuation marks and at script changes in CJK languages */
  /* From CSS Text Module Level 4: https://drafts.csswg.org/css-text-4/#text-spacing-property */
  text-spacing: trim-start allow-end trim-adjacent ideograph-alpha ideograph-numeric;
}
body > header,
body > footer {
  user-select: none;
}
button,
a {
  user-select: none;
}
html {
  height: 100%;
}
html,
body {
  overflow-x: hidden;
  margin: 0;
  padding: 0;
}
html ._noscroll,
body ._noscroll {
  overflow: hidden;
}
*,
*::before,
*::after {
  box-sizing: border-box;
}
h1 {
  font-size: 2rem;
  margin: 0.67em 0;
}
h2 {
  font-size: 1.5rem;
}
h3 {
  font-size: 1.17rem;
}
h4 {
  font-size: 1rem;
}
h5 {
  font-size: 0.83rem;
}
h6 {
  font-size: 0.67rem;
}
h2,
h3,
h4,
h5,
h6 {
  line-height: 1;
}
pre {
  white-space: pre-wrap;
}
hr {
  border: 0.5px solid;
}
*:focus,
*:active {
  outline: none;
}
input,
select,
textarea,
button {
  -webkit-appearance: none;
  -moz-appearance: none;
  border-radius: 0;
  -moz-border-radius: 0;
  -webkit-border-radius: 0;
}
a,
a:focus,
a:active,
a:visited,
a:hover {
  text-decoration: none;
}
img,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* Switch display mode to block, since that's what we usually want for images. */
  vertical-align: middle;
  /* If you override, and make an image inline, it's likely you'll want middle vertical alignment. */
}
img,
video {
  max-width: 100%;
  /* Make images and video flexible by default. */
  height: auto;
  /* Ensure images and video maintain their aspect ratio when max-width comes into play. */
}
img {
  display: inline-block;
  max-width: 100%;
}
[disabled="disabled"] {
  opacity: 0.4;
  pointer-events: none;
}
textarea {
  resize: none;
}
code,
kbd,
samp {
  font-family: monospace;
  font-size: 1rem;
}
section,
aside {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding-left: 20px;
  padding-right: 20px;
}
section article,
aside article {
  max-width: var(--maxWidth);
  width: 100%;
  overflow: hidden;
}
:root {
  --maxWidth: 300px;
}
section {
  background-color: silver;
}
section article {
  background-color: #e4e4e4;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG91ZC1iYXNlLmxlc3MiLCIuLi8uLi9zcmMvY2xvdWQtc2VjdGlvbnMubGVzcyIsInNpdGUubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0VBR0ksbUJBQUE7OztFQUdBLGtGQUFBOztBQUdKLElBQUk7QUFDSixJQUFJO0VBQ0EsaUJBQUE7O0FBR0o7QUFDQTtFQUNJLGlCQUFBOztBQUdKO0VBQ0ksWUFBQTs7QUFHSjtBQUNBO0VBQ0ksa0JBQUE7RUFDQSxTQUFBO0VBQ0EsVUFBQTs7QUFHSixJQUVJO0FBREosSUFDSTtFQUNJLGdCQUFBOztBQUlSO0FBQ0EsQ0FBQztBQUNELENBQUM7RUFDRyxzQkFBQTs7QUFHSjtFQUNJLGVBQUE7RUFDQSxnQkFBQTs7QUFHSjtFQUNJLGlCQUFBOztBQUdKO0VBQ0ksa0JBQUE7O0FBR0o7RUFDSSxlQUFBOztBQUdKO0VBQ0ksa0JBQUE7O0FBR0o7RUFDSSxrQkFBQTs7QUFHSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0ksY0FBQTs7QUFHSjtFQUNJLHFCQUFBOztBQUdKO0VBQ0ksbUJBQUE7O0FBR0osQ0FBQztBQUNELENBQUM7RUFDRyxhQUFBOztBQUdKO0FBQ0E7QUFDQTtBQUNBO0VBQ0ksd0JBQUE7RUFDQSxxQkFBQTtFQUNBLGdCQUFBO0VBQ0EscUJBQUE7RUFDQSx3QkFBQTs7QUFHSjtBQUNBLENBQUM7QUFDRCxDQUFDO0FBQ0QsQ0FBQztBQUNELENBQUM7RUFDRyxxQkFBQTs7QUFHSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJLGNBQUE7O0VBRUEsc0JBQUE7OztBQUlKO0FBQ0E7RUFDSSxlQUFBOztFQUVBLFlBQUE7OztBQUlKO0VBQ0kscUJBQUE7RUFDQSxlQUFBOztBQUdKO0VBQ0ksWUFBQTtFQUNBLG9CQUFBOztBQUdKO0VBQ0ksWUFBQTs7QUFHSjtBQUNBO0FBQ0E7RUFDSSxzQkFBQTtFQUNBLGVBQUE7O0FDbEpKO0FBQ0E7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSxtQkFBQTs7QUFQSixPQVNJO0FBUkosS0FRSTtFQUNJLFdBQVcsZUFBWDtFQUNBLFdBQUE7RUFDQSxnQkFBQTs7QUNWUjtFQUNJLGlCQUFBOztBQUdKO0VBQ0ksd0JBQUE7O0FBREosT0FHSTtFQUNJLHlCQUFBIiwic291cmNlc0NvbnRlbnQiOlsiOnJvb3Qge1xyXG4gICAgLyogQ29uc2lzdGVudCBsaW5lIHNwYWNpbmcsIHdoaWNoIGRvZXMgbm90IHVubmVjZXNzYXJpbHkgZ3JvdyB0byBhY2NvbW1vZGF0ZSB0aGluZ3MgdGhhdCB3b3VsZCBmaXQgYW55d2F5ICovXHJcbiAgICAvKiBGcm9tIENTUyBJbmxpbmUgTGF5b3V0IE1vZHVsZSBMZXZlbCAzOiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWlubGluZS0zLyNsaW5lLXNpemluZy1wcm9wZXJ0eSAqL1xyXG4gICAgbGluZS1zaXppbmc6IG5vcm1hbDtcclxuICAgIC8qIEltcHJvdmUgc3BhY2luZyBvZiBwdW5jdHVhdGlvbiBtYXJrcyBhbmQgYXQgc2NyaXB0IGNoYW5nZXMgaW4gQ0pLIGxhbmd1YWdlcyAqL1xyXG4gICAgLyogRnJvbSBDU1MgVGV4dCBNb2R1bGUgTGV2ZWwgNDogaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy10ZXh0LTQvI3RleHQtc3BhY2luZy1wcm9wZXJ0eSAqL1xyXG4gICAgdGV4dC1zcGFjaW5nOiB0cmltLXN0YXJ0IGFsbG93LWVuZCB0cmltLWFkamFjZW50IGlkZW9ncmFwaC1hbHBoYSBpZGVvZ3JhcGgtbnVtZXJpYztcclxufVxyXG5cclxuYm9keT5oZWFkZXIsXHJcbmJvZHk+Zm9vdGVyIHtcclxuICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG59XHJcblxyXG5idXR0b24sXHJcbmEge1xyXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbn1cclxuXHJcbmh0bWwge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG5odG1sLFxyXG5ib2R5IHtcclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbn1cclxuXHJcbmh0bWwsXHJcbmJvZHkge1xyXG4gICAgLl9ub3Njcm9sbCB7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIH1cclxufVxyXG5cclxuKixcclxuKjo6YmVmb3JlLFxyXG4qOjphZnRlciB7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5oMSB7XHJcbiAgICBmb250LXNpemU6IDJyZW07XHJcbiAgICBtYXJnaW46IDAuNjdlbSAwO1xyXG59XHJcblxyXG5oMiB7XHJcbiAgICBmb250LXNpemU6IDEuNXJlbTtcclxufVxyXG5cclxuaDMge1xyXG4gICAgZm9udC1zaXplOiAxLjE3cmVtO1xyXG59XHJcblxyXG5oNCB7XHJcbiAgICBmb250LXNpemU6IDFyZW07XHJcbn1cclxuXHJcbmg1IHtcclxuICAgIGZvbnQtc2l6ZTogMC44M3JlbTtcclxufVxyXG5cclxuaDYge1xyXG4gICAgZm9udC1zaXplOiAwLjY3cmVtO1xyXG59XHJcblxyXG5oMixcclxuaDMsXHJcbmg0LFxyXG5oNSxcclxuaDYge1xyXG4gICAgbGluZS1oZWlnaHQ6IDE7XHJcbn1cclxuXHJcbnByZSB7XHJcbiAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XHJcbn1cclxuXHJcbmhyIHtcclxuICAgIGJvcmRlcjogMC41cHggc29saWQ7XHJcbn1cclxuXHJcbio6Zm9jdXMsXHJcbio6YWN0aXZlIHtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbn1cclxuXHJcbmlucHV0LFxyXG5zZWxlY3QsXHJcbnRleHRhcmVhLFxyXG5idXR0b24ge1xyXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xyXG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMDtcclxuICAgIC1tb3otYm9yZGVyLXJhZGl1czogMDtcclxuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMDtcclxufVxyXG5cclxuYSxcclxuYTpmb2N1cyxcclxuYTphY3RpdmUsXHJcbmE6dmlzaXRlZCxcclxuYTpob3ZlciB7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbn1cclxuXHJcbmltZyxcclxudmlkZW8sXHJcbmNhbnZhcyxcclxuYXVkaW8sXHJcbmlmcmFtZSxcclxuZW1iZWQsXHJcbm9iamVjdCB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIC8qIFN3aXRjaCBkaXNwbGF5IG1vZGUgdG8gYmxvY2ssIHNpbmNlIHRoYXQncyB3aGF0IHdlIHVzdWFsbHkgd2FudCBmb3IgaW1hZ2VzLiAqL1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIC8qIElmIHlvdSBvdmVycmlkZSwgYW5kIG1ha2UgYW4gaW1hZ2UgaW5saW5lLCBpdCdzIGxpa2VseSB5b3UnbGwgd2FudCBtaWRkbGUgdmVydGljYWwgYWxpZ25tZW50LiAqL1xyXG59XHJcblxyXG5pbWcsXHJcbnZpZGVvIHtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIC8qIE1ha2UgaW1hZ2VzIGFuZCB2aWRlbyBmbGV4aWJsZSBieSBkZWZhdWx0LiAqL1xyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgLyogRW5zdXJlIGltYWdlcyBhbmQgdmlkZW8gbWFpbnRhaW4gdGhlaXIgYXNwZWN0IHJhdGlvIHdoZW4gbWF4LXdpZHRoIGNvbWVzIGludG8gcGxheS4gKi9cclxufVxyXG5cclxuaW1nIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxufVxyXG5cclxuW2Rpc2FibGVkPVwiZGlzYWJsZWRcIl0ge1xyXG4gICAgb3BhY2l0eTogMC40O1xyXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbn1cclxuXHJcbnRleHRhcmVhIHtcclxuICAgIHJlc2l6ZTogbm9uZTtcclxufVxyXG5cclxuY29kZSxcclxua2JkLFxyXG5zYW1wIHtcclxuICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XHJcbiAgICBmb250LXNpemU6IDFyZW07XHJcbn0iLCJcclxuc2VjdGlvbixcclxuYXNpZGUge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xyXG5cclxuICAgIGFydGljbGUge1xyXG4gICAgICAgIG1heC13aWR0aDogdmFyKC0tbWF4V2lkdGgpO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICB9XHJcbn0iLCJAaW1wb3J0ICcuLy4uLy4uL3NyYy9jbG91ZC1iYXNlLmxlc3MnO1xyXG5AaW1wb3J0ICcuLy4uLy4uL3NyYy9jbG91ZC1zZWN0aW9ucy5sZXNzJztcclxuXHJcbjpyb290IHtcclxuICAgIC0tbWF4V2lkdGg6IDMwMHB4O1xyXG59XHJcblxyXG5zZWN0aW9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHNpbHZlcjtcclxuXHJcbiAgICBhcnRpY2xlIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRlNGU0O1xyXG4gICAgfVxyXG59Il0sImZpbGUiOiJzaXRlLmNzcyJ9 */
